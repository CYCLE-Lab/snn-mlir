# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Action on Ubuntu Machines
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Setup Python
      uses: actions/setup-python@v5

    - name: Install Ninja on Linux
      run: sudo apt-get install ninja-build

    - uses: actions/checkout@v4

    - name: LLVM Configure CMake
      run: | 
          cd ${{github.workspace}}/third_party;
          rm -rf llvm-project;
          git clone --single-branch --branch ln-specific git@github.com:CYCLE-Lab/llvm-project.git;
          cd llvm-project ;
          cmake -B build -G Ninja llvm \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_TARGETS_TO_BUILD="host" \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ENABLE_RTTI=ON \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DLLVM_ENABLE_LIBEDIT=OFF

    - name: LLVM Build
      run: cd "${{github.workspace}}/third_party/llvm-project/build" && ninja

    - name: Configure CMake
      run: |
          cmake -B "${{github.workspace}}/build" -G Ninja . \
            -DLLVM_DIR=llvm-build/lib/cmake/llvm \
            -DMLIR_DIR=llvm-build/lib/cmake/mlir \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DSNNMLIR_ENABLE_BINDINGS_PYTHON=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: ninja

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ninja check-snn-lit


name: x86-Ubuntu-llvm-from-sources

on:
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v1
      - name: Download Ninja
        run: |
          git clone https://github.com/ninja-build/ninja.git
          pushd ninja
          ./configure.py --bootstrap
          # chmod +x ninja
          ./ninja --version
          popd
      - name: Add Ninja to $PATH
        run: |
          echo "${GITHUB_WORKSPACE}/ninja" >> $GITHUB_PATH
      - name: Clone llvm-project
        run: |
          git clone --depth 10 --single-branch --branch release/18.x https://github.com/llvm/llvm-project
      - name: Build LLVM
        run: |
          cd llvm-project
          mkdir build && cd build
          ln -s /usr/bin/x86_64-linux-gnu-ld.gold ld
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang" \
            -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_OPTIMIZED_TABLEGEN=ON \
            ../llvm
          # Note that only the required tools are built
          ninja clang opt lli not FileCheck
      - name: Install lit
        run: |
          sudo apt-get install python3-setuptools
          sudo pip3 install lit
      - name: Build HelloWorld
        run: |
          cd HelloWorld
          mkdir build && cd build
          cmake -DLT_LLVM_INSTALL_DIR="$GITHUB_WORKSPACE/llvm-project/build" ../
          make -j2
      - name: Build llvm-tutor + run tests
        run: |
          mkdir build && cd build
          cmake -DLT_LLVM_INSTALL_DIR="$GITHUB_WORKSPACE/llvm-project/build" ../
          make -j2
          lit test/