# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Action on Ubuntu Machines
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Setup Python
      uses: actions/setup-python@v5

    - name: Install Ninja on Linux
      run: sudo apt-get install ninja-build

    - uses: actions/checkout@v4

    - name: Submodule Init
      run: git submodule init

    - name: Submodule Update
      run: git submodule update --init --recursive

    - name: LLVM Configure CMake
      run: | 
          cmake -B llvm-build -G Ninja \
            "${{github.workspace}}/third_party/llvm-project/llvm"  \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_TARGETS_TO_BUILD="host" \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ENABLE_RTTI=ON \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DLLVM_ENABLE_LIBEDIT=OFF

    - name: LLVM Build
      run: cd "llvm-build" && ninja

    - name: Configure CMake
      run: |
          cmake -B "${{github.workspace}}/build" -G Ninja . \
            -DLLVM_DIR=llvm-build/lib/cmake/llvm \
            -DMLIR_DIR=llvm-build/lib/cmake/mlir \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DSNNMLIR_ENABLE_BINDINGS_PYTHON=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: ninja

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ninja check-snn-lit

